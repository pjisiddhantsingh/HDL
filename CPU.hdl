CHIP CPU {

    IN  inM[16],        
        instruction[16], 
        reset;           
                        
                        

    OUT outM[16],        
        writeM,          
        addressM[15], 
        pc[15];         

    PARTS:
	
	Mux16(a=instruction, b=aluouttorega, sel=instruction[15], out=regain); 
	
	Not(in=instruction[15], out=fainstruction);
	Or(a=fainstruction, b=instruction[5], out=regaload);					
	ARegister(in=regain, load=regaload, out=regaout, out[0..14]=addressM);	
	
	Mux16(a=regaout, b=inM, sel=instruction[12], out=aluy);				
	
	And(a=instruction[4], b=instruction[15], out=regdload);						
	DRegister(in=regdin, load=regdload, out=regdout, out=alux);
	
    ALU(x=alux,
		y=aluy,
		zx=instruction[11],
		nx=instruction[10],
		zy=instruction[9],
		ny=instruction[8],
		f=instruction[7],
		no=instruction[6],
		out=aluout,
		zr=zr,
		ng=ng);
	
	Mux16(sel=instruction[5], a=false, b=true, out=d116);							
	And16(a=aluout, b[0..15]=d116, out=aluouttorega);							
	
	Mux16(sel=instruction[4], a=false, b=true, out=d216);
	And16(a=aluout, b[0..15]=d216, out=regdin);
	
	Mux16(sel=instruction[3], a=false, b=true, out=d316);
	And16(a=aluout, b[0..15]=d316, out=outM);						
	
	And(a=instruction[3], b=instruction[15], out=writeM);
	
	And(a=instruction[2], b=ng, out=j1check); 								
	And(a=instruction[1], b=zr, out=j2check);										
	
	Or(a=zr, b=ng, out=Orzrng);
	Not(in=Orzrng, out=Norzrng);
	And(a=instruction[0], b=Norzrng, out=j3check);								
	
	Or(a=j1check, b=j2check, out=j1j2check);
	Or(a=j1j2check, b=j3check, out=j1j2j3check);								
	
	And(a=j1j2j3check, b=instruction[15], out=JMP);			
	Not(in=JMP, out=increment);											
	
	PC(in=regaout, load=JMP, inc=increment, reset=reset, out[0..14]=pc);
}